image: docker:19.03

variables:
  REPOSITORY_URL: 704361135933.dkr.ecr.ap-southeast-1.amazonaws.com/talc
  REGION: ap-southeast-1
  TASK_DEFINITION_NAME: talc-dev
  CLUSTER_NAME: talc-dev
  SERVICE_NAME: svc-talc-dev
  CPU: 512
  MEMORY: 1024
  TASKS_COUNT: 1
  EXECUTION_ROLE_ARN: arn:aws:iam::704361135933:role/ecsTaskExecutionRole
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY

services:
  - docker:19.03.1-dind

before_script:
  - uname -a
  - apk add --update --no-cache curl py-pip
  - pip install awscli
  - IMAGE_TAG="$CI_COMMIT_SHORT_SHA"

stages:
  - build-dev
  - deploy-dev

build:
  stage: build-dev
  script:
    - echo "Building image..."
    - ls
    - echo DYNAMODB_SESSIONS_ACCESS_KEY_ID=$DEV_DYNAMODB_SESSIONS_ACCESS_KEY_ID >> .env
    - echo DYNAMODB_SESSIONS_SECRET_ACCESS_KEY=$DEV_DYNAMODB_SESSIONS_SECRET_ACCESS_KEY >> .env
    - echo COGNITO_USERPOOL_ID=$DEV_COGNITO_USERPOOL_ID >> .env
    - echo COGNITO_USERPOOL_APP_ID=$DEV_COGNITO_USERPOOL_APP_ID >> .env
    - ls
    - cat .env

    - docker build -t $REPOSITORY_URL:latest .
    - echo "Tagging image..."
    - IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
    - docker tag $REPOSITORY_URL:latest $REPOSITORY_URL:"$CI_COMMIT_BRANCH"-"$IMAGE_TAG"
    - echo "Pushing image..."
    - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 704361135933.dkr.ecr.ap-southeast-1.amazonaws.com
    - docker push $REPOSITORY_URL:"$CI_COMMIT_BRANCH"-"$IMAGE_TAG"
  only:
    - master
  tags:
    - docker

deploy:
  stage: deploy-dev
  script:
    - apk add --no-cache jq
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME" --region "${REGION}")
    - NEW_CONTAINER_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE $REPOSITORY_URL:"$CI_COMMIT_BRANCH"-"$IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions')
    - echo "Registering new container definition..."
    - aws ecs register-task-definition --region "${REGION}" --family "${TASK_DEFINITION_NAME}" --container-definitions "${NEW_CONTAINER_DEFINTIION}" --cpu ${CPU} --memory ${MEMORY} --execution-role-arn "${EXECUTION_ROLE_ARN}" --network-mode "awsvpc" --requires-compatibilities "FARGATE"
    - TASK_ARN=$(aws ecs list-tasks --region "${REGION}" --cluster "${CLUSTER_NAME}" --service-name "${SERVICE_NAME}")
    - TASK_IDS=$(echo $TASK_ARN | jq -j '.taskArns | join(" ")')
    - echo "Updating the service..."
    - aws ecs update-service --region "${REGION}" --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}"  --task-definition "${TASK_DEFINITION_NAME}" --desired-count "${TASKS_COUNT}"
    - echo "Waiting until the previous task ${TASK_ID} is stopped..."

    - echo $TASK_ARN
    - echo $TASK_IDS
    - echo $REGION
    - echo $CLUSTER_NAME

  only:
    - master
  tags:
    - docker
